Singleton pattern is a design solution where an application wants to have one and only one instance of any class,
in all possible scenarios without any exceptional condition.

Singleton with eager initialization:-
This is a design pattern where an instance of a class is created much before it is actually required.
Mostly it is done on system startup. In an eager initialization singleton pattern, the singleton instance is created
irrespective of whether any other class actually asked for its instance or not.

public class EagerSingleton {
  private static volatile EagerSingleton instance = new EagerSingleton();

  // private constructor
  private EagerSingleton() {
  }

  public static EagerSingleton getInstance() {
    return instance;
  }
}
Instance is created irrespective of it is required in runtime or not. If this instance is not big object and you can
live with it being unused.
-----------------------------------------------------------------
Singleton with lazy initialization:-
Lazy initialization is the tactic of delaying the creation of an object, the calculation of a value,
or some other expensive process, until the first time it is needed. In a singleton pattern, it restricts the creation
of the instance until it is requested for first time.

public final class LazySingleton {
  private static volatile LazySingleton instance = null;

  // private constructor
  private LazySingleton() {
  }

  public static LazySingleton getInstance() {
    if (instance == null) {
      synchronized (LazySingleton.class) {
        instance = new LazySingleton();
      }
    }
    return instance;
  }
}

lazy initialization:-
-------------------------------
In situations like on-demand object creation where we create an object of the class only when it is accessed,
lazy initialization works very well. It helps application load faster because it does not depend upon instance
creation at the time of application startup.

Drawback:
When two threads T1 and T2 comes to create instance and execute ?instance==null?, both threads have identified instance
variable to null thus assume they must create an instance.
They sequentially goes to synchronized block and create the instances. At the end,we have two instances in our application.
double checked locking is a solution for above approach.This principle tells us to recheck the instance variable again in
synchronized block in given below way:
public class LazySingleton {
 private static volatile LazySingleton instance = null;
 // private constructor
 private LazySingleton() {
 }
 public static LazySingleton getInstance() {
 if (instance == null) {
 synchronized (LazySingleton.class) {
 // Double check
 if (instance == null) {
 instance = new LazySingleton();
 }
 }
 }
 return instance;
 }
}