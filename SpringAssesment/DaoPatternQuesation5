The Data Access Object (DAO) pattern is a structural pattern that allows us to isolate the application/business layer
from the persistence layer using an abstract API.
The API hides from the application all the complexity of performing CRUD operations in the underlying storage mechanism.
This permits both layers to evolve separately without knowing anything about each other.
---------------------------------------------------------------------------------------------------------------------
@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private long id;

    private String name;
    private String email;

    // standard constructors / setters / getters
}
The User class is just a plain container for user data, so it doesn't implement any other behavior worth stressing.
------------------------------------------------------------------------------------------------------------------------
public interface Dao<T> {
Optional<T> get(long id);
    List<T> getAll();
    void save(T t);
    void update(T t, String[] params);
    void delete(T t);
}
it's clear that in above the Dao interface defines an abstract API that performs CRUD operations.
---------------------------------------------------------------------------------------------------------------------
public class UserDao implements Dao<User> {

    private List<User> users = new ArrayList<>();

    public UserDao() {
        users.add(new User("John", "john@domain.com"));
        users.add(new User("Susan", "susan@domain.com"));
    }

    @Override
    public Optional<User> get(long id) {
        return Optional.ofNullable(users.get((int) id));
    }

    @Override
    public List<User> getAll() {
        return users;
    }

    @Override
    public void save(User user) {
        users.add(user);
    }

    @Override
    public void update(User user, String[] params) {
        user.setName(Objects.requireNonNull(params[0], "Name cannot be null"));
        user.setEmail(Objects.requireNonNull(params[1], "Email cannot be null"));

        users.add(user);
    }

    @Override
    public void delete(User user) {
        users.remove(user);
    }
}
The UserDao class implements all the functionality required for fetching, updating and removing User objects.

-------------------------------------------------------------------------------------------------------------------
public class UserApplication {

    private static Dao<User> userDao;

    public static void main(String[] args) {
        userDao = new UserDao();

        User user1 = getUser(0);
        System.out.println(user1);
        userDao.update(user1, new String[]{"Jake", "jake@domain.com"});

        User user2 = getUser(1);
        userDao.delete(user2);
        userDao.save(new User("Julie", "julie@domain.com"));

        userDao.getAll().forEach(user -> System.out.println(user.getName()));
    }

    private static User getUser(long id) {
        Optional<User> user = userDao.get(id);

        return user.orElseGet(() -> new User("non-existing user", "no-email"));
    }
}
In this case, the main method just uses a UserDao instance to perform CRUD operations on a few User objects.
